/*  =========================================================================
    aisnmea - class description

    Copyright (c) 2017 Inkblot Software Limited.

    This Source Code Form is subject to the terms of the Mozilla Public
    License, v. 2.0. If a copy of the MPL was not distributed with this
    file, You can obtain one at http://mozilla.org/MPL/2.0/.
    =========================================================================
*/

#ifndef AISNMEA_H_INCLUDED
#define AISNMEA_H_INCLUDED

#ifdef __cplusplus
extern "C" {
#endif

//  Include the library file with typdefs, public includes and public constants
#include "aisnmea_library.h"

//  @warning THE FOLLOWING @INTERFACE BLOCK IS AUTO-GENERATED BY ZPROJECT
//  @warning Please edit the model at "api/aisnmea.xml" to make changes.
//  @interface
//  This API is a draft, and may change without notice.
#ifdef AISNMEA_BUILD_DRAFT_API
//  *** Draft method, for development use, may change without warning ***
//  Parse an NMEA string and return the results, or NULL if the parse failed.
//  Pass NULL for string argument to construct in default state.
AISNMEA_EXPORT aisnmea_t *
    aisnmea_new (const char *nmea);

//  *** Draft method, for development use, may change without warning ***
//  Destroy the aisnmea.
AISNMEA_EXPORT void
    aisnmea_destroy (aisnmea_t **self_p);

//  *** Draft method, for development use, may change without warning ***
//  Make a copy of the object, including all owned resources.
//  New object has same externally-visible state as source object.
//  Caller owns return value and must destroy it when done.
AISNMEA_EXPORT aisnmea_t *
    aisnmea_dup (aisnmea_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Parse an NMEA string, reusing the current parser, replacing its contents
//  with the new parsed data.
//
//  Returns 0 on success, or -1 on parse failure. Object state after a failed
//  parse is undefined.
AISNMEA_EXPORT int
    aisnmea_parse (aisnmea_t *self, const char *nmea);

//  *** Draft method, for development use, may change without warning ***
//  Get the string in the tagblock with given key.
//  Returns NULL if key not found or if there was no tagblockl.
AISNMEA_EXPORT const char *
    aisnmea_tagblockval (aisnmea_t *self, const char *key);

//  *** Draft method, for development use, may change without warning ***
//  Sentence identifier, e.g. "!AIVDM"
//  TODO consider stripping the leading '!'; depends on what clients want.
AISNMEA_EXPORT const char *
    aisnmea_head (aisnmea_t *self);

//  *** Draft method, for development use, may change without warning ***
//  How many fragments make up the whole set containing this one?
AISNMEA_EXPORT size_t
    aisnmea_fragcount (aisnmea_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Which fragment number in the whole set is this one? (One-based)
AISNMEA_EXPORT size_t
    aisnmea_fragnum (aisnmea_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Sequential message ID, for multi-sentence messages.
//  Often (intentionally) missing, in which case we return -1.
AISNMEA_EXPORT int
    aisnmea_messageid (aisnmea_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Radio channel message was transmitted on (NB not the same as
//  unit class, this is about frequency).
//  Theoretically only 'A' and 'B' are allowed, but '1' and '2'
//  are seen, which mean the same things.
//  If no channel was present, or the NMEA column held more than one
//  character, set to -1.
AISNMEA_EXPORT char
    aisnmea_channel (aisnmea_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Data payload for the message. This is where the AIS meat lies.
//  Pass this to an AIS message decoding library.
AISNMEA_EXPORT const char *
    aisnmea_payload (aisnmea_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Number of padding bits included at the end of the payload.
//  The AIS decoding library needs to know this number, so it can strip
//  them off.
AISNMEA_EXPORT size_t
    aisnmea_fillbits (aisnmea_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Message checksum. Transmitted in hex.
AISNMEA_EXPORT size_t
    aisnmea_checksum (aisnmea_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Returns the AIS message type of the message, or -1 if the message
//  doesn't exhibit a valid AIS messgae type.
//  (This is worked out from the first character of the payload.)
AISNMEA_EXPORT int
    aisnmea_aismsgtype (aisnmea_t *self);

//  *** Draft method, for development use, may change without warning ***
//  Self test of this class.
AISNMEA_EXPORT void
    aisnmea_test (bool verbose);

#endif // AISNMEA_BUILD_DRAFT_API
//  @end

#ifdef __cplusplus
}
#endif

#endif
